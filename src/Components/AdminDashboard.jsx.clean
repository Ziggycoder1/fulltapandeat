import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  FiUsers, FiDollarSign, FiPieChart, FiSettings, FiPlus, 
  FiMenu, FiX, FiBell, FiEdit, FiTrash2, FiLogOut,
  FiSun, FiMoon, FiSearch, FiRefreshCw, FiArrowUp, FiArrowDown
} from 'react-icons/fi';
import { Bar, Pie } from 'react-chartjs-2';
import { Chart, CategoryScale, LinearScale, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';
import './AdminDashboard.css';
import { apiRequest } from '../api';
import Report from './Report';
import Users from './Users';

// Register Chart.js components
Chart.register(
  CategoryScale,
  LinearScale,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend
);

const AdminDashboard = () => {
  const navigate = useNavigate();
  
  // Authentication check
  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) {
      navigate('/login', { replace: true });
    }
  }, [navigate]);

  // UI State
  const [isSidebarOpen, setIsSidebarOpen] = useState(() => {
    if (window.innerWidth < 1025) return false;
    return localStorage.getItem('sidebarCollapsed') !== 'true';
  });
  
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isProfileMenuOpen, setIsProfileMenuOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(window.innerWidth < 1025);
  const [selectedSection, setSelectedSection] = useState('dashboard');
  const [darkMode, setDarkMode] = useState(false);

  // Handle window resize and device detection
  useEffect(() => {
    const handleResize = () => {
      const mobile = window.innerWidth < 1025;
      setIsMobile(mobile);
      
      if (mobile) {
        setIsSidebarOpen(false);
        document.body.style.overflow = isMobileMenuOpen ? 'hidden' : 'auto';
      } else {
        const savedState = localStorage.getItem('sidebarCollapsed');
        setIsSidebarOpen(savedState !== 'true');
        setIsMobileMenuOpen(false);
        document.body.style.overflow = 'auto';
      }
    };

    handleResize();
    window.addEventListener('resize', handleResize);
    
    return () => {
      window.removeEventListener('resize', handleResize);
      document.body.style.overflow = 'auto';
    };
  }, [isMobileMenuOpen]);

  // Close mobile menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (isMobileMenuOpen && !e.target.closest('.sidebar') && !e.target.closest('.mobile-menu-toggle')) {
        setIsMobileMenuOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [isMobileMenuOpen]);

  const toggleSidebar = () => {
    if (isMobile) {
      const newMobileState = !isMobileMenuOpen;
      setIsMobileMenuOpen(newMobileState);
      document.body.style.overflow = newMobileState ? 'hidden' : 'auto';
    } else {
      const newState = !isSidebarOpen;
      setIsSidebarOpen(newState);
      localStorage.setItem('sidebarCollapsed', !newState);
    }
  };

  const closeMobileMenu = () => {
    if (isMobile) {
      setIsMobileMenuOpen(false);
    }
  };

  // Toggle dark mode
  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
  };

  // Handle logout
  const handleLogout = () => {
    localStorage.removeItem('token');
    navigate('/login');
  };

  return (
    <div className={`dashboard-container ${!isSidebarOpen && 'collapsed'} ${darkMode && 'dark-mode'}`}>
      {/* Mobile Menu Overlay */}
      <div 
        className={`mobile-overlay ${isMobileMenuOpen ? 'open' : ''}`}
        onClick={closeMobileMenu}
      />
      
      {/* Mobile Header */}
      {isMobile && (
        <div className="mobile-header">
          <button 
            className="mobile-menu-toggle"
            onClick={toggleSidebar}
            aria-label={isMobileMenuOpen ? "Close menu" : "Open menu"}
          >
            {isMobileMenuOpen ? <FiX /> : <FiMenu />}
          </button>
          <h3>Tape & Eat</h3>
        </div>
      )}
      
      {/* Sidebar */}
      <div className={`sidebar ${isMobileMenuOpen ? 'mobile-open' : ''} ${!isMobile && isSidebarOpen ? 'open' : ''}`}>
        <div className="sidebar-header">
          <h2>Tape & Eat</h2>
        </div>
        
        <nav className="sidebar-nav">
          <button 
            className={`nav-item${selectedSection === 'dashboard' ? ' active' : ''}`} 
            onClick={() => setSelectedSection('dashboard')}
          >
            <FiPieChart /> {isSidebarOpen && 'Dashboard'}
          </button>
          
          <button 
            className={`nav-item${selectedSection === 'restaurants' ? ' active' : ''}`} 
            onClick={() => setSelectedSection('restaurants')}
          >
            <FiUsers /> {isSidebarOpen && 'Restaurants'}
          </button>
          
          <button 
            className={`nav-item${selectedSection === 'users' ? ' active' : ''}`} 
            onClick={() => setSelectedSection('users')}
          >
            <FiUsers /> {isSidebarOpen && 'Users'}
          </button>
          
          <button 
            className={`nav-item${selectedSection === 'logs' ? ' active' : ''}`} 
            onClick={() => setSelectedSection('logs')}
          >
            <FiDollarSign /> {isSidebarOpen && 'Meal Logs'}
          </button>
          
          <button 
            className={`nav-item${selectedSection === 'settings' ? ' active' : ''}`} 
            onClick={() => setSelectedSection('settings')}
          >
            <FiSettings /> {isSidebarOpen && 'Settings'}
          </button>
        </nav>
        
        <div className="sidebar-footer">
          <button 
            className="theme-toggle"
            onClick={toggleDarkMode}
            aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}
          >
            {darkMode ? <FiSun /> : <FiMoon />}
          </button>
          
          <button 
            className="logout-btn"
            onClick={handleLogout}
          >
            <FiLogOut /> {isSidebarOpen && 'Logout'}
          </button>
        </div>
      </div>
      
      {/* Main Content */}
      <div className="main-content">
        <header className="top-navbar">
          <div className="search-bar">
            <FiSearch className="search-icon" />
            <input 
              type="text" 
              placeholder="Search..." 
              className="search-input"
            />
          </div>
          
          <div className="user-menu">
            <button 
              className="notifications-btn"
              aria-label="Notifications"
            >
              <FiBell />
              <span className="notification-badge">3</span>
            </button>
            
            <div className="profile-dropdown">
              <button 
                className="profile-btn"
                onClick={() => setIsProfileMenuOpen(!isProfileMenuOpen)}
                aria-expanded={isProfileMenuOpen}
                aria-label="User menu"
              >
                <div className="avatar">
                  <span>AD</span>
                </div>
                <span className="username">Admin</span>
              </button>
              
              {isProfileMenuOpen && (
                <div className="dropdown-menu">
                  <button className="dropdown-item">
                    <FiUser /> Profile
                  </button>
                  <button className="dropdown-item" onClick={handleLogout}>
                    <FiLogOut /> Logout
                  </button>
                </div>
              )}
            </div>
          </div>
        </header>
        
        <div className="content-area">
          {/* Dashboard Section */}
          {selectedSection === 'dashboard' && (
            <div className="dashboard-section">
              <h1>Dashboard</h1>
              {/* Add your dashboard content here */}
              <div className="stats-grid">
                <div className="stat-card">
                  <h3>Total Users</h3>
                  <p className="stat-number">1,234</p>
                  <p className="stat-change positive">
                    <FiArrowUp /> 12% from last month
                  </p>
                </div>
                <div className="stat-card">
                  <h3>Active Today</h3>
                  <p className="stat-number">342</p>
                  <p className="stat-change positive">
                    <FiArrowUp /> 5% from yesterday
                  </p>
                </div>
                <div className="stat-card">
                  <h3>Meals Served</h3>
                  <p className="stat-number">2,567</p>
                  <p className="stat-change negative">
                    <FiArrowDown /> 3% from last week
                  </p>
                </div>
                <div className="stat-card">
                  <h3>Revenue</h3>
                  <p className="stat-number">$12,345</p>
                  <p className="stat-change positive">
                    <FiArrowUp /> 8% from last month
                  </p>
                </div>
              </div>
              
              <div className="charts-container">
                <div className="chart-card">
                  <h3>Weekly Activity</h3>
                  <div className="chart-wrapper">
                    <Bar 
                      data={{
                        labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                        datasets: [
                          {
                            label: 'Meals Served',
                            data: [65, 59, 80, 81, 56, 55, 40],
                            backgroundColor: 'rgba(75, 192, 192, 0.6)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                          }
                        ]
                      }}
                      options={{
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                          y: {
                            beginAtZero: true
                          }
                        }
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>
          )}
          
          {/* Users Section */}
          {selectedSection === 'users' && <Users />}
          
          {/* Other Sections */}
          {selectedSection === 'restaurants' && (
            <div className="section-container">
              <h2>Restaurants</h2>
              <p>Restaurants management content will go here.</p>
            </div>
          )}
          
          {selectedSection === 'logs' && (
            <div className="section-container">
              <h2>Meal Logs</h2>
              <p>Meal logs content will go here.</p>
            </div>
          )}
          
          {selectedSection === 'settings' && (
            <div className="section-container">
              <h2>Settings</h2>
              <div className="settings-grid">
                <div className="settings-card">
                  <h3>System Settings</h3>
                  <div className="form-group">
                    <label>Default Meal Price</label>
                    <input type="number" placeholder="Enter default price" />
                  </div>
                  <div className="form-group">
                    <label>Daily Meal Limit</label>
                    <input type="number" placeholder="Enter daily limit" />
                  </div>
                  <button className="btn btn-primary">Save Settings</button>
                </div>
                
                <div className="settings-card">
                  <h3>Account Settings</h3>
                  <div className="form-group">
                    <label>Change Password</label>
                    <input type="password" placeholder="Current password" />
                    <input type="password" placeholder="New password" />
                    <input type="password" placeholder="Confirm new password" />
                  </div>
                  <button className="btn btn-primary">Update Password</button>
                </div>
              </div>
            </div>
          )}
          
          {selectedSection === 'report' && <Report />}
        </div>
      </div>
    </div>
  );
};

export default AdminDashboard;
